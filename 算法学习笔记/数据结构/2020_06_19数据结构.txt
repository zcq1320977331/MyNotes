1. 递归
	(1):递归就是自身调用自身,每次调用时返回不同的变量
	(2):递归有助于编程者解决复杂问题,同时让代码更简洁
	(3):递归能解决的问题
		1. 各种数学问题,8皇后,汉诺塔,阶乘,迷宫,球和篮子
		2. 各种算法,快排,归并排序,二分查找,分治算法
		3. 将用栈解决的问题,用递归更简洁
	
2. 迷宫问题
	(1): 0为未走过的路,1为墙,2为路径,3为走过但走不通的路
	def GetMap(row,column):#制作地图
		Map = []
		for i in range(row):
			Map.append([0]*column)
		for i in range(column):
			Map[0][i] = 1
			Map[row -1][i] = 1
		for j in range(row):
			Map[j][0] = 1
			Map[j][column-1] = 1
		return Map
	def SetWall():#设置墙
		Map[1][2]=1
		for i in range(7):
			Map[3][i] = 1
		Map[3][3] = 0
	def ShowMap(Map):#显示地图
		for ele in Map:
			print(' '.join([str(i) for i in ele]))


	def GetResult(x,y):#找路
		if Map[6][5] == 2:#如果终点,如果终点的值为2,说明找到路了
			return True
		else:#否则找路
			if Map[x][y] == 0:
				Map[x][y] = 2#假设能走的同
				if GetResult(x,y+1):#向右,如果走通返回True
					return True
				elif GetResult(x+1,y):#向下,如果走通返回True
					return True
				elif GetResult(x-1,y):#向上,如果走通返回True
					return True
				elif GetResult(x,y-1):#向左,如果走通返回True
					return True
				else:#如果都走不同说明是死路,返回False
					Map[x][y] = 3
					return False
			else:
				return False

	Map = GetMap(8,7)
	SetWall()
	GetResult(1,1)
	ShowMap(Map)
	
2. 八皇后问题
	def GetMap(Max):#获取棋盘
		Map = []
		for i in range(Max):
			Map.append([0]*8)
		return Map

	def ShowMap(Map,):#展示棋盘并返回
		ret = []
		for ele in Map:
			ret.append(ele.index(1)+1) #压缩棋盘,ret列表中的第几个元素表示第几行,对应的数表示第几列
			# print(' '.join([str(i) for i in ele]))
		return ret

	def Rule(Map,row):#放置的规则,如果可以放返回True,如果不可以放返回False
		i2 = row
		j2 = Map[row].index(1)
		for i1 in range(row):
			j1 = Map[i1].index(1)
			if j1 == j2 or abs(i2-i1)==abs(j2-j1):#如果在之前的棋子的同一列,或者对角线
				return False#说明不能放,返回False
		return True#否则返回True,能放

	def GetResult(Map,row,res=[]):
		'''
		:param Map: 棋盘
		:param row: 行
		:param res: 统计所有拜访位置
		:return res :返回结果
		'''
		if row == Max:#如果row(行)==Max,说明找到了一个摆放位置
			Map = ShowMap(Map,)
			res.append(Map)
			return True
		else:
			for column in range(Max):
				Map[row][column] = 1 #先让第row行第column列元素为1,表示放置一个棋子
				if Rule(Map,row):#如果该棋子满足要求
					GetResult(Map,row+1)#继续防止
					Map[row][column] = 0 #此为回溯的时候,将之前棋子清空,因为同一行只能有一个棋子
				else:
					Map[row][column] = 0#如果不能放,重置该点
		return res

	if __name__ == '__main__':
		Max = 8
		Map = GetMap(Max)
		res = GetResult(Map,0)
		print('共有:%s种方法'%len(res))
		for ret in res:
			print(str(ret))
		input()
		
3. 2n皇后问题

	def GetMap(Max):#获取棋盘
		Map = []
		for i in range(Max):
			Map.append([0]*8)
		return Map

	def ShowMap(Map,):#展示棋盘并返回
		ret = []
		for ele in Map:
			ret.append((ele.index(1)+1,ele.index(2)+1))
			#压缩棋盘,ret列表中的第几个元素表示第几行,对应的元组中的第一个表示白皇后放在第几列
			#对应的元组中的第二个表示黑皇后放在第几列
		return ret

	def Rule(Map,row,rule):#放置的规则,如果可以放返回True,如果不可以放返回False
		#rule,传入皇后类型,白皇后为1,黑皇后为2
		i2 = row
		j2 = Map[row].index(rule)
		for i1 in range(row):
			j1 = Map[i1].index(rule)
			if j1 == j2 or abs(i2-i1)==abs(j2-j1):#如果在之前的棋子的同一列,或者对角线
				return False#说明不能放,返回False
		return True#否则返回True,能放

	def GetResult(Map,row,res=[]):
		'''
		:param Map: 棋盘
		:param row: 行
		:param res: 统计所有拜访位置
		:return res :返回结果
		'''
		if row == Max:#如果row(行)==Max,说明找到了一个摆放位置
			Map = ShowMap(Map,)
			res.append(Map)
			return True
		else:
			for column1 in range(Max):
				Map[row][column1] = 1 #先让第row行第column1列元素为1,表示放置一个白皇后
				if Rule(Map,row,1):#如果该棋子满足要求
					for column2 in range(Max):#开始放黑皇后
						if Map[row][column2] == 0:#如果该位置能放
							Map[row][column2] = 2#先让第row行第column2列元素为2,表示放置一个黑皇后
							if Rule(Map, row, 2):#如果该棋子满足要求
								GetResult(Map, row + 1)#开始下一行棋子放置
								Map[row][column2] = 0 #回溯时,重置黑皇后,获得白皇后不变,黑皇后变化所有放法
							else:
								Map[row][column2] = 0#如果该棋子不满足要求,重置黑皇后
					Map[row][column1] = 0 #回溯时,重置白皇后,再次获得黑皇后变化所有放法
				else:
					Map[row][column1] = 0#如果不能放,重置白皇后
		return res

	if __name__ == '__main__':
		Max = 4 #棋盘大小,4*4
		Map = GetMap(Max) #获取棋盘
		res = GetResult(Map,0) #获取结果
		print('共有:%s种方法'%len(res))
		for ret in res:
			print(str(ret))
		input()