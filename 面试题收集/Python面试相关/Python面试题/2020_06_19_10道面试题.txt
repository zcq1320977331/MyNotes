1. 简述同源策略

    (1): 同源策略需要同时满足以下三点要求
         1. 协议相同
         2. 域名相同
         3. 端口相同
    (2): 只要不满足任意一个要求,就不符合同源策略,就会出现跨域
         1. http://abc.com 和 https://abc.com不同源,---协议不同
         2. http://abc.com 和 https://cde.com不同源,---域名不同
         3. http://abc.com 和 https://abc.com:8080不同源,--端口不同

2. 简述cookie 和 session 的区别
    (1): session在服务端,cookie在客户端(浏览器端)
    (2): session 的运行依赖session id ,而session id 存在与cookie,如果浏览器禁用了cookie
         同时session也会失效,存储session时,键与cookie中的sessionid相同值则是开发人员设置
         的键值对信息,进行了base64编码,过期时间由开发人员设置.
    (3): cookie的安全性比session差

3. 简述多进程,多线程
    (1): 多进程
        1. 操作系统进行资源分配和调度的基本单位,多个进程之间相互独立
        2. 稳定性好,如果一个进程崩溃,不影响其他进程
        3. 一个进程可以包含多个线程
        4. 进程消耗资源大,开启的进程数量有限制
    (2): 多线程
        1. cpu进行资源分配和调度的基本单位,线程是进程的一部分是比进程更小的能独立运行的基
           本单位,同一个进程下的多个线程共享该进程的所有资源.
        2. 如果是i/o操作密集,则多线程执行效率高,缺点是一个线程的崩溃,会造成进程的崩溃
    (3):应用
        1. i/o密集用多线程,用户输入,或者sleep时,可以切换到其他线程执行,减少等待时间
        2. cpu密集用多进程,因为python中有全局解释器锁(GIL),不能利用cpu多核优势
        
4. 简述any() 和all() 方法
    print(all([1,2,3,0]))# all ,迭代器中所有元素都为真返回True,否则返回False
    print(any([[],(),0,False,'',{},None]))#any , s迭代器中有一个为真就返回True,否则返回False

5. 常见的异常都有什么
    (1): IOError ,输入输出异常
    (2): AttributeError ,试图访问一个对象没有的属性
    (3): ImportError ,无法引入包或者模块 
    (4): IndentationError ,语法错误,代码没有对齐
    (5): IndexError , 下标超出索引
    (6): KeyError , 访问字典中不存在的键
    (7): SyntaxError , python代码逻辑语法出错,无法执行
    (8): NameError , 使用一个还未赋予对象的变量
    
6. copy , 和 deepcopy的区别
    (1):复制不可变数据类型时,copy和deepcopy一样,如(数值,字符串,元组),和=效果一样,对象的id不变
    (2): 复制的值是可变对象时,浅拷贝有两种情况
        1. 复制的对象中无复杂的子对象如列表嵌套列表,此时原来的值即使改变也不会影响
           浅复制的值,相当于新建了一个对象
        2. 复制的对象中有复杂的子对象,此时浅复制的对象和原来对象中子对象id相同,改变任意一个会互相影响
    (3): 深拷贝,deepcopy,完全复制并建立一个新对象,包括所有复杂的子对象
    
    
7. 常用的魔方方法
    1. 什么是魔方方法
        魔方方法指的是python内部已经包含的,被双下滑线包围的方法,这些方法在特定的操作下被自动调用
    2. 常用的魔方方法
        (1): __new__(cls, *args, **kwargs): ,实例化对象时调用的第一个方法,只接受第一个参数cls
            并把其他参数传给 __init__(self) ,并且此方法必须返回一个对象
        (2): __init__(self) , 初始化类被调用
        (3): __del__(self) ,del 对象 ,或者对像被销毁时调用(程序结束,所有指针被销毁)
        (4): __call__(self)  ,允许一个类的实例像函数一样被调用,对象()
        (5): __len__(self) , len(),
        (6): __repr__(self) ,repr()
        (7): __str__(self) , str()
        (8): __hash__(self) ,hash()
        (9): __bool__(self) ,bool()
        (10): __format__(self) ,format()
8. 通过命令行执行python脚本时(print(sys.argv)),会输出什么数据
    1. python demo.py 1 2
    2. 输出['demo.py','1','2']

9. 将[i for i in range(3)]改成生成器
    (1): 生成器是特殊的迭代器
    (2): 第一种方法
        lst = (i for i in range(3))
        print(type(lst))
    (3): 第二种
        def fn1():
            for i in range(3):
                yield i
        print(type(fn1()))
10. 去掉字符中的空格'a b c'和' abc '
    str1 = 'a b c'
    str2 = ' abc '
    print(str1.replace(' ', ''))
    print(str2.replace(' ', ''))#或者print(str2.strip(' '))
        
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    